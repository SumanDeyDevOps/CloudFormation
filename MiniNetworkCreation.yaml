Description: Mini Network Creation

Resources:
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnetOne:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: '10.0.1.0/24'
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnetOne:
      Type: 'AWS::EC2::Subnet'
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: '10.0.2.0/24'
        AvailabilityZone: !Select [0, !GetAZs '']
    
  PublicSubnetRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref PublicSubnetOne
        RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref PrivateSubnetOne
        RouteTableId: !Ref PrivateRouteTable

  InternetGateway:
      Type: 'AWS::EC2::InternetGateway'
    
  AttachGateway:
      Type: 'AWS::EC2::VPCGatewayAttachment'
      Properties:
        VpcId: !Ref MyVPC
        InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref MyVPC
    
  PrivateRouteTable:
      Type: 'AWS::EC2::RouteTable'
      Properties:
        VpcId: !Ref MyVPC

  PublicRoute:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway

  PublicSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: 'Allow SSH and HTTP traffic'
        VpcId: !Ref MyVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: '0.0.0.0/0'
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: '0.0.0.0/0'

  PrivateSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: 'Allow internal traffic'
        VpcId: !Ref MyVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: '10.0.0.0/16'

  PublicInstance:
      Type: 'AWS::EC2::Instance'
      Properties:
        SubnetId: !Ref PublicSubnetOne
        InstanceType: 't2.micro'
        ImageId: 'ami-00385a401487aefa4' # Use the AMI ID for your desired region
        SecurityGroupIds: 
          - !Ref PublicSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: '8'
              Encrypted: 'true'
        KeyName: 'myKeyValuePair'  

  PrivateInstance:
      Type: 'AWS::EC2::Instance'
      Properties:
        SubnetId: !Ref PrivateSubnetOne
        InstanceType: 't2.micro'
        ImageId: 'ami-00385a401487aefa4' # Use the AMI ID for your desired region
        SecurityGroupIds: 
          - !Ref PrivateSecurityGroup

  JumpBoxSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: 'Allow SSH traffic for jump box'
        VpcId: !Ref MyVPC
        SecurityGroupIngress:
        - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: '192.168.0.0/24'
        # CidrIp: 'your.trusted.ip/32' # Replace with your trusted IP

  JumpBoxInstance:
      Type: 'AWS::EC2::Instance'
      Properties:
      SubnetId: !Ref PublicSubnetOne
      InstanceType: 't2.micro'
      ImageId: 'ami-00385a401487aefa4' # Use the AMI ID for your desired region
      SecurityGroupIds:
      - !Ref JumpBoxSecurityGroup
      KeyName: 'myKeyValuePair' # Ensure you have a key pair for SSH access